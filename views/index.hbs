<div class="right-panel col-11">

  <div class="info-details col-12 ">

    <div class="order-date col-8">
      <span class="date-section" id="current-date-time">
      </span>
    </div>



    <div class="cashier-details col-4">
      <i class="bi bi-person-lock"></i>

      {{#if user.isAdmin}}
      <p class="cashier-name m-0">Admin: {{ user.firstName }} {{user.lastName }}</p>

      {{else}}

      <p class="cashier-name m-0">Cashier: {{ user.firstName }} {{user.lastName }}</p>

      {{/if}}

    </div>
  </div>


  <!-- Categories and product section starts-->

  <div class="row m-0">
    <div class="left-section col-8 p-4">

      <!-- Categories  section starts-->


      <section class="categories-container col-12">
        <div id="categories-section" class="col-12">
          <!-- category zone -->
        </div>

        <button class="carousel-buttons" id="prev-button"> <i class="arrow left"></i> </button>
        <button class="carousel-buttons" id="next-button"> <i class="arrow right"></i> </button>

      </section>
      <!-- Categories  section ends-->
      <!-- Search section starts-->

      <!-- Error Message Container -->
      <div id="message-container" class="message-container"></div>

      <div class="search col-12 ">
        <form class="form-inline col-12" id="product-search-form">


          <input class=" form-control" id="product-search" type="search" placeholder="Search product"
            aria-label="Search">
        </form>


      </div>

      <!-- Search section ends-->

      <div id="product-section" class="row">


        <!---render and search the product dynamic-->

      </div>
    </div>
    <!-- Categories and product section ends-->
    <!-- CheckOut section starts-->
    <div class="right-section cart col-4  ">

      <div class="checkout-section box-shadow col-12 ">
        <div class="customer-input col-12">
          <input class="form-control col-6" type="text" id="customerIdInput" placeholder="Search Customer"
            aria-label="customer" />
          <button id="searchButton " class="col-4 btn btn" onclick="searchCustomerResult()">Add</button>

        </div>
        <p class="col-12 mb-2" id="customer_name"></p>
        <div class="product-display-section col-12">


        </div>


        <div class="Total-price">
          <p>SubTotal <span class="subtotal">$0.00</span></p>
          <p>Tax <span class="tax">$0.00</span></p>
          <p><b>Total </b><span class="total"><b>$0.00</b></span></p>


          <div class="payment type">

            <button type="button" class="checkout-section-buttons" id="checkoutBtn">
              Proceed to payment
            </button>
            <button type="button" class="checkout-section-buttons" id="clearCartBtn"> Clear cart</button>

          </div>


        </div>

      </div>
    </div>
  </div>
</div>

<!-- CheckOut section ends-->
</div>
<!--Right panel ends-->

<!---checkout popup starts--->
<div id="checkout-popup" class="checkoutPopup">
  <div class="checkout-content">

    <span class="close">&times;</span>
    <h2>Checkout Order <span id="checkout-order-popup">#3484</span></h2>
    <h1>Total balance:<b class="amount-total" id="amount-total"> 0.00</b></h1>

    {{#if user.role}}
    <p>{{user.role}}: {{ user.firstName }} {{ user.lastName }}</p>
    <p id="customer-name">Customer: Guest</p>
    {{/if}}


    <div class="coupon-section">
      <label for="coupon-code"> Coupon Code:</label>
      <input type="text" id="coupon-code" class=" form-control" placeholder="Enter your coupon code here" min="4"
        max="100">

      <button id="apply-coupon">Apply</button>
    </div>

    <table id="checkout-table" class="table">
      <thead>

        <tr>
          <th scope="col">index</th>
          <th scope="col">Product</th>
          <th scope="col">Qty</th>
          <th scope="col">Price</th>
        </tr>

      </thead>
      <tbody id="checkout-table-popup-body">

      </tbody>
      <tfoot id="checkout-table-footer-body">

        <tr>
          <th scope="row" colspan="3">Subtotal:</th>
          <td class="product-total"><span class="checkout-subtotal"><b id="total-price-no-tax">0.00</b></span>
          </td>
        </tr>
        <tr>
          <th scope="row" colspan="3">Tax:</th>
          <td class="product-total"><span class="checkout-tax"><b id="total-price-only-tax">0.00</b></span></td>
        </tr>

        <tr>
          <th scope="row" colspan="3">Total:</th>
          <td class="product-total"><span class="checkout-total"><b id="total-price-with-tax">0.00</b></span>
          </td>
        </tr>


      </tfoot>
    </table>

    <div class="payment-options">

      <button type="button" class="btn btn-primary" id="paymentBtnCard">
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="40" fill="currentColor" class="bi bi-credit-card"
          viewBox="0 0 16 16">
          <path
            d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V7z" />
          <path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1v-1z" />
        </svg>
      </button>

      <button type="button" class="btn btn-primary" id="paymentBtnCash">
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="40" fill="currentColor" class="bi bi-cash"
          viewBox="0 0 16 16">
          <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" />
          <path
            d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2H3z" />
        </svg>
      </button>
    </div>


  </div>

  <!--cash payment popup end--->
</div>

<!---checkout popup end--->

<!--card payment popup starts--->
<div id="card-payment-popup" class="checkoutPopup">
  <div class="payment-content">
    <span class="close">&times;</span>
    <h2>Payment</h2>
    <br />
    <div class="animated-gif">
      <h6>Please follow the instructions on the terminal</h6>
      <br />
      <img src="/images/giphy.gif" alt="animated gif" />
    </div>
  </div>
</div>

<!--card payment popup end--->

<!--cash payment popup starts--->
<div id="cash-payment-popup" class="checkoutPopup">
  <div class="payment-content">
    <span class="close">&times;</span>
    <h2>Payment</h2>
    <br />
    <div class="calculator">
      <h6> Reminder change calculator </h6>
      <p>Enter the amount given:</p>
      <input type="text" id="amountGiven" placeholder="Amount in cash" />
      <br />
      <br />
      <button class="btn btn-secondary" onclick="calculateChange()" id="calculateChangeBtn">Calculate Change</button>
      <h6 id="changeResult"></h6>
      <br />

      <button type="submit" onclick="closePaymentPopup()" id="closeOrderBtn"> Completed. Close order</button>
      <button type="submit" class="btn violet-btn mt-3" onclick="closePaymentPopup()" id="printReceiptBtnÂ§">Print Receipt</button>

    </div>
  </div>
</div>
</div>

<!-- Success popup starts (hidden initially) -->
<div id="success-popup" class="checkoutPopup" style="display: none;">
  <div class="success-content">
    <h2>Payment successful. Printing receipt...</h2>
  </div>
</div>
<!-- Success popup end -->


<!--payment popup end--->
</div>
<script>
  // HTML ELEMENTS
  const searchForm = document.getElementById("product-search-form");
  const searchInput = document.getElementById("product-search");
  const productDisplaySection = document.querySelector(".product-display-section");
  const subTotalEle = document.querySelector(".subtotal");
  const taxEle = document.querySelector(".tax");
  const totalEle = document.querySelector(".total");
  const prevButton = document.getElementById("prev-button");
  const nextButton = document.getElementById("next-button");
  const productSection = document.getElementById('product-section');
  const clearCartButton = document.getElementById("clearCartBtn");
  const searchButton = document.getElementById('searchButton');
  const customerIdInput = document.getElementById('customerIdInput');
  const customerName = document.getElementById('customer_name')
  // HTML for POPUP ELEMENTS
  const checkoutBtn = document.getElementById("checkoutBtn");
  const checkoutPopup = document.getElementById("checkout-popup");
  const applyCouponButton = document.getElementById("apply-coupon");
  const checkTablePopupBody = document.getElementById('checkout-table-popup-body')
  const checkTableFooterBody = document.getElementById('checkout-table-footer-body')
  const paymentBtnCard = document.getElementById("paymentBtnCard")
  const paymentBtnCash = document.getElementById("paymentBtnCash")
  const paymentPopUpCard = document.getElementById("card-payment-popup")
  const paymentPopUpCash = document.getElementById("cash-payment-popup")
  const closeButtonCash = document.querySelector("#cash-payment-popup .close");
  const closeButtonCard = document.querySelector("#card-payment-popup .close");
  //State// GLOBAL VARIABLES
  let customer = '';
  const localStorageCart = localStorage.getItem('cart')
  const cartData = localStorageCart && JSON.parse(localStorageCart)
  let cart = cartData || {
    shoppingCart: [],
    subTotal: 0,
    tax: 0,
    total: 0
  }
  let index = 0;
  const products = [];
  const min = 1000; // Minimum 5-digit number (inclusive)
  const max = 9999; // Maximum 5-digit number (inclusive)
  let orderNumber = Math.floor(Math.random() * (max - min + 1))

  if (cartData) {
    updateCartDisplay()
  }



  const URLS = {
    category: '/category/all',
    product: '/product/all',
  };

  // EVENT LISTENERS
  // Prevent the form from submitting
  searchForm?.addEventListener("submit", (event) => {
    event.preventDefault();
  });

  prevButton?.addEventListener("click", () => {
    document.getElementById('categories-section').scrollLeft += -500;
  });

  nextButton?.addEventListener("click", () => {

    document.getElementById('categories-section').scrollLeft += 500;

  });

  searchInput?.addEventListener("input", handleSearchInput);

  // Add an event listener to the button
  clearCartButton?.addEventListener("click", function () {
    // Call a function to clear the cart (you can define this function)
    clearCart();

  });

   document.getElementById('printReceiptBtn')?.addEventListener('click', function() {
    printReceipt();
  });

  function printReceipt(orderNumber) {
      // Make an AJAX request to the server to fetch search results
    fetch(`api/printReceipt/${orderNumber}`)
      .then((response) => response.json())
      .then(data => {
        console.log(data)
      })
     .catch(error => {
      console.error("Error fetching receipt:", error);
      // Add logic to handle the error and update the UI
    });
  }
  // Function to display messages
  function displayMessage(message, messageType) {
    const messageContainer = document.getElementById("message-container");

    // Create a new div for each message
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${messageType}`; // You can style differently based on the message type
    messageDiv.innerHTML = `<p>${message}</p>`;

    // Append the new div to the container
    messageContainer.appendChild(messageDiv);
  }

  // Function to clear messages
  function clearMessages() {
    const messageContainer = document.getElementById("message-container");
    messageContainer.innerHTML = "";
  }
  // Get All Categories and all Products from the DB, populate the List
  const getCategoriesAndProducts = async () => {
    const [categoryResponse, productResponse] = await Promise.all([fetch(URLS.category), fetch(URLS.product)])


    const categoryPayload = await categoryResponse.json()
    const productPayload = await productResponse.json()

    const { categoryList } = categoryPayload
    const { productList } = productPayload

    return { categoryList, productList }
  };

  // RENDER CATEGORIES
  const renderCategories = (allCategories = [], allProducts = []) => {
    const categoriesSectionElement = document.getElementById("categories-section");

    allCategories.forEach((category) => {
      if (category.parentCategory) {
        const categoryItemElement = document.createElement("div");
        // add element properties
        categoryItemElement.classList.add('category', 'box-shadow', 'col-2', 'category-item', 'card-img-top')
        categoryItemElement.onclick = () => handleCategoryItemClick(category, allProducts)

        // add content
        const elementContent = `
    <div class="card-body">
      <img class="category-img card-img-top " src="${category.imageUrl || 'images/no-image.png'}" />
      <p class="card-title">${category.categoryName}</p>
      </div>
    `

        categoryItemElement.innerHTML = elementContent

        // Add to category section

        categoriesSectionElement.appendChild(categoryItemElement)
      }
    })
  }
  // Function to fetch search results and display them
  function fetchSearchResults(searchTerm) {

    fetch(`/search/${searchTerm}`)
      .then((response) => response.json())
      .then(displaySearchResults)
      .catch(console.error);
  }

  function searchCustomerResult() {
 
   fetch(`/search/customer/${customerIdInput.value}`)
      .then((response) => response.json())
      .then(data => {
        customerName.innerText = `${data.firstName} ${data.lastName}`
        localStorage.setItem("customer", JSON.stringify({ firstName: data.firstName, lastName: data.lastName, id: data._id, customerId: data.customerId, phoneNumber: data.phoneNumber }));
      })
      .catch(console.error);
  }


  // Function to display the product when we click the category

  const handleCategoryItemClick = (category, products) => {
    clearProductSection()

    const productRelatedToCategory = products.filter((productItem) => {
      return productItem.categoryName === category.categoryName
    })

    for (const product of productRelatedToCategory) {

      const productElement = createProductCard(product)

      productSection.appendChild(productElement)
    }
  }

  // Function to update the total based on a product
  function updateTotal(product) {
    
    const productTax = product.productPrice * 0.1; // Assuming 10% tax, adjust as needed
    cart.subTotal += product.productPrice;
    cart.tax += productTax;
    cart.total = cart.subTotal + cart.tax;
    console.log(cart)
    updateCartDisplay();
  }

  // Function to handle input in the search field
  function handleSearchInput(event) {
    const searchTerm = event.target.value.trim();

    if (searchTerm.length >= 3) {
      fetchSearchResults(searchTerm);
    } else {
      clearProductSection();
    }
  }

  // Function to display search results
  function displaySearchResults(searchResult) {
    clearProductSection();

    if (searchResult.length > 0) {
      searchResult.forEach((product) => {
        const productCard = createProductCard(product)

        productSection.appendChild(productCard)
      });
    } else {
      productSection.innerHTML = "<p>No results found.</p>";
    }
  }

  const handleAddProductClick = (productEncoded) => {
    const decodeProduct = JSON.parse(decodeURIComponent(productEncoded))
    handleAddToCart(decodeProduct)
  }

  // Function to create a product card
  function createProductCard(product) {
    const productCard = document.createElement("div");
    productCard.classList.add("card", "product", "col-lg-3", "col-md-3");

    const productNameCapitalized = product.productName.charAt(0).toUpperCase() + product.productName.slice(1)
    const encodeProductForArgument = encodeURIComponent(JSON.stringify(product))

    productCard.innerHTML = `

    <h5 class="card-title product-name">${productNameCapitalized}
    
    <p class="col-8 product-quantity">${product.quantity}</p></h5>
    <div class="priceAddCart d-flex">
      
      <p class="card-text product-price col-9">$${product.productPrice}</p>
      <button class="btn addCart bi bi-plus col-3" value="Add" onclick="handleAddProductClick('${encodeProductForArgument}')"></button>

    </div>
  `
    return productCard
  }

  // Function to clear search results
  function clearProductSection() {
    productSection.innerHTML = "";
  }

  // Function to display the products of a specific category
  function displayProductsByCategory(category) {
    const products = [];
    productSection.innerHTML = "";
    const filteredProducts = products.filter(product => product.category === category);
    filteredProducts.forEach(product => {
      const productCard = createProductCard(product);
      productSection.appendChild(productCard);

    });
  }

  // Function to update the cart display
  function updateCartDisplay() {
    productDisplaySection.innerHTML = "";

    cart.shoppingCart.forEach((cartItem) => {
      const productItem = createCartItem(cartItem);
      productDisplaySection.appendChild(productItem);
    });
    if (subTotalEle && taxEle && totalEle) {
      subTotalEle.innerHTML = `$ ${parseFloat(cart.subTotal).toFixed(2)}`;
      taxEle.innerHTML = `$ ${parseFloat(cart.tax).toFixed(2)}`;
      totalEle.innerHTML = `$ ${parseFloat(cart.total).toFixed(2)}`;
      localStorage.setItem('cart', JSON.stringify(cart))

    }


  }

  // Function to handle adding a product to the cart
  function handleAddToCart(product) {
    const findProduct = cart.shoppingCart.find((item) => item._id === product._id);

    if (!findProduct) {
      cart.shoppingCart.push({ ...product, noItems: 1 });

    } else {
      findProduct.noItems++;
    }
    updateTotal(product);
  }

  // Function to handle incrementing a cart item
  function increment(event) {
    const id = event.target.getAttribute("data-id");
    const findProduct = cart.shoppingCart.find((item) => item._id === id);

    if (findProduct) {
      findProduct.noItems++;
      updateTotal(findProduct);
    }
  }

  // Function to handle decrementing a cart item
  function decrement(event) {
    const id = event.target.getAttribute("data-id");
    const findProduct = cart.shoppingCart.find((item) => item._id === id);

    if (findProduct) {
      if (findProduct.noItems > 1) {
        findProduct.noItems--;
      } else {
        cart.shoppingCart = cart.shoppingCart.filter((item) => item._id !== id);
      }
      const productTax = findProduct.productPrice * 0.1; // Assuming 10% tax, adjust as needed
      cart.subTotal = cart.subTotal - findProduct.productPrice
      cart.tax -= productTax;
      cart.total = cart.subTotal + cart.tax;
    }
    updateCartDisplay();
  }

  // Function to create a cart item
  function createCartItem(cartItem) {
    const productItem = document.createElement("div");
    productItem.classList.add("product-add-section");

    productItem.innerHTML = `
    <div class="product-in-cart">
      <p class="product-name">${cartItem.productName}</p>
      <h4 class="product-price">$${cartItem.productPrice.toFixed(2)}</h4>
    </div>
    <div class="input-group">
      <i class="bi bi-dash decrement" data-id="${cartItem._id}"></i>
      <span class="input-number form-control quantity">${cartItem.noItems}</span>
      <i class="bi bi-plus increment" data-id="${cartItem._id}"></i>
    </div>
  `;

    const incrementButton = productItem.querySelector(".increment");
    incrementButton.addEventListener("click", increment);

    const decrementButton = productItem.querySelector(".decrement");
    decrementButton.addEventListener("click", decrement);

    return productItem;
  }

  // Function to clear the cart
  function clearCart() {
    productDisplaySection.innerHTML = ""
    taxEle.innerHTML = "$0.00"
    totalEle.innerHTML = "$0.00"
    subTotalEle.innerHTML = "$0.00"
    localStorage.removeItem('cart')
    localStorage.removeItem('customer')
  }


  // FUNCTIONS
  const addItemToPopupCart = (shoppingItem) => {
    const popupCartItem = document.createElement('tr')

    const productNameFirstLetterUpperCase = `${shoppingItem.productName.charAt(0).toUpperCase()}${shoppingItem.productName.slice(1)}`
    const priceSplitTwoDecimal = Number.parseFloat(shoppingItem.productPrice).toFixed(2) * shoppingItem.noItems

    popupCartItem.innerHTML = `

    <td>${index += 1}</td>
    <td>${productNameFirstLetterUpperCase}</td>
    <td>${shoppingItem.noItems}</td>
    <td>$ ${priceSplitTwoDecimal}</td>
  `

    if (checkTablePopupBody) {
      checkTablePopupBody.appendChild(popupCartItem)
    }
  }

  const applyDiscount = () => {
    const couponCodeInput = document.getElementById("coupon-code")
    const amountToPay = document.getElementById("amount-total")

    let totalAmount = 0
    let discount = 0.10
  let tax = 0.10
    const discountCode = couponCodeInput.value;

    cart.shoppingCart.forEach((product) => {
      totalAmount = totalAmount + product.productPrice * product.noItems
    })

    if (discountCode === "WELCOME10") {
      const discountAmount = (totalAmount * discount).toFixed(2);
      const newAmountAfterDiscount = (totalAmount - discountAmount).toFixed(2)
      const newTaxed = parseFloat(newAmountAfterDiscount) * tax;
      const afterdiscountedTotal = parseFloat(newAmountAfterDiscount) + newTaxed;

      localStorage.setItem('total', parseFloat(afterdiscountedTotal).toFixed(2))
      localStorage.setItem('tax', parseFloat(newTaxed).toFixed(2))
      localStorage.setItem('subTotal', parseFloat(newAmountAfterDiscount).toFixed(2))
      cart.total = Number(parseFloat(afterdiscountedTotal).toFixed(2));
      cart.subTotal =  Number(parseFloat(newAmountAfterDiscount).toFixed(2));

      cart.tax = newTaxed;

      updateCartDisplay()

      const discountLine = document.createElement('tr');

      discountLine.innerHTML = `
      <th scope="row"> Discount amount: 
         <td classname = "product-total"> <b> - $ ${discountAmount} </b> </td>
      </th>
      <th scope="row"> New total: 
         <td classname = "product-total"> <b> $ ${parseFloat(afterdiscountedTotal).toFixed(2)} </b></td>
      </th>
      `

      if (checkTableFooterBody) {
        amountToPay.innerHTML = ` ${newAmountAfterDiscount}`
        checkTableFooterBody.appendChild(discountLine)
      }
      // Update the displayed total
      const amountTotal = document.getElementsByClassName("product-total");
      amountTotal.textContent = ` ${newAmountAfterDiscount}`;
    } else {
      alert("Invalid coupon code. Please try again.");
    }
  }

  const closePaymentPopup = () => {
    document.getElementById("card-payment-popup").style.display = "none";
    document.getElementById("cash-payment-popup").style.display = "none";
    const shoppingCart = JSON.parse(localStorage.getItem("cart")); // Parse the shopping cart data from local storage

    const customer = JSON.parse(localStorage.getItem("customer"));
    const orderDate = new Date();

    // Map the shopping cart items to the Products array
    const orderData = {
      Products: shoppingCart.shoppingCart.map((item) => ({
        product: item._id,
        productName: item.productName,
        quantity: item.noItems,
        price: item.productPrice,

      })),
      total: shoppingCart.total,
      tax: shoppingCart.tax,
      subTotal: shoppingCart.subTotal,
      customerFirstName: customer?.firstName,
      customerLastName: customer?.lastName,
      customerPhoneNumber: customer?.phoneNumber,
      customerId: customer?.customerId,
      orderNumber,
      orderDate
    };

    fetch("/orderCreate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(orderData)
    })
      .then(response => response.json())
      .then(data => {
        displayMessage("Order created successfully!", "success");
        localStorage.removeItem("customer")
        localStorage.removeItem("cart")
        setTimeout(() => {
          printReceipt(orderNumber);
         // window.location.reload();
        }, 2000)
      })
      .catch(error => {
        // Handle errors
        displayMessage("Error creating order. Please try again.", "error");
        console.error("Error creating order", error);
      });

  }

  // CARD: Function for dummy terminal payment processing
  const terminalPaymentLoad = () => {
    const paymentContent = document.getElementById("card-payment-popup");

    paymentContent.innerHTML = `
    <div class="payment-content">
      <span class="close">&times;</span>
      <h2>Payment</h2>
      <br/>
      <div class="animated-gif">
        <h6>Please follow the instructions on the terminal</h6>
        <br/>
        <img src="/images/giphy.gif" alt="animated gif"/>
      </div>
    </div>
    </div>

    `;
  }

  // CARD: Function to show payment success message
  const showPaymentSuccess = () => {
    const paymentContent = document.getElementById("card-payment-popup");

    paymentContent.innerHTML = `
    <div class="payment-content">
      <span class="close" onclick="closePaymentPopup()">&times;</span>
      <h2>Payment successful</h2>
      <br/>
      <p>Printing receipt...</p>
    </div>
    </div>
    `;
  }

  // CARD: Function to show the payment is completed
  const showDoneMessage = () => {
    const paymentContent = document.getElementById("card-payment-popup");

    paymentContent.innerHTML = `
    <div class="payment-content">
      <span class="close" onclick="closePaymentPopup()">&times;</span>
      <h2>Done!</h2>
      <h6> Next customer please</h6>
    </div>
    </div>
    `;

  }




  // CASH: Function to calculate the change
  const calculateChange = () => {
     const applyDiscount = JSON.parse(localStorage.getItem("discount")); 
    const cashAmountElement = document.getElementById("amountGiven");
    const totalPriceElement = document.getElementById("total-price-with-tax");

    const totalPriceAmount = cart.total;
    const amountGiven = parseFloat(cashAmountElement.value);
    const amountToPay = parseFloat(totalPriceAmount);

    const change = amountGiven - amountToPay;

    const changeResult = document.getElementById("changeResult");
    if (isNaN(change) || change < 0) {
      changeResult.textContent = "Insufficient amount given.";
    } else {
      changeResult.textContent = "Change to give: $" + change.toFixed(2);
    }
  }

  // LISTENERS
  checkoutBtn?.addEventListener("click", () => { 
    if (cart.shoppingCart.length > 0) {
 checkTablePopupBody.innerHTML ="";
  index = 0;
    checkoutPopup.style.display = "block";

    // If the customer is logged in, update the customer name in the checkout popup
    const customerNameElement = document.getElementById("customer-name");
    if(customerNameElement){
    if (localStorage.getItem("customer")) {
      const customer = JSON.parse(localStorage.getItem("customer"));
      customerNameElement.textContent = `Customer: ${customer.firstName} ${customer.lastName}`;
    } else {
      customerNameElement.textContent = "Customer: Guest";
    }
    }


    const TAX = 0.1
    const totalPrice = cart.shoppingCart.reduce((acc, curr) => {
      return acc + curr.productPrice * curr.noItems
    }, 0).toFixed(2)
    const totalPriceWithTax = (totalPrice * TAX).toFixed(2)
    const onlyTax = (totalPriceWithTax - totalPrice).toFixed(2)

    const amountTotalElement = document.getElementById('amount-total')
    const checkoutOrderNumberElement = document.getElementById('checkout-order-popup')
    const totalPriceNoTaxElement = document.getElementById('total-price-no-tax')
    const totalPriceOnlyTaxElement = document.getElementById('total-price-only-tax')
    const totalPriceWithTaxElement = document.getElementById('total-price-with-tax')
    const closeButton = document.querySelector(".close");

    amountTotalElement.innerHTML = `$ ${parseFloat(totalPriceWithTax).toFixed(2)}`
    checkoutOrderNumberElement.innerHTML = `# ${orderNumber}`;
    totalPriceNoTaxElement.innerHTML = `$ ${parseFloat(totalPrice).toFixed(2)}`
    totalPriceOnlyTaxElement.innerHTML = `$ ${parseFloat(onlyTax).toFixed(2)}`
    totalPriceWithTaxElement.innerHTML = `$ ${parseFloat(totalPriceWithTax).toFixed(2)}`

    cart.shoppingCart.forEach((shoppingItem) => addItemToPopupCart(shoppingItem))

    closeButton.addEventListener("click", function () {
      checkoutPopup.style.display = "none";
    });
    closeButton.style.cursor = "pointer";


    }else{
      // Display a message or handle the case where the cart is empty
    alert("Please add items to the cart before proceeding to checkout.");
    }
  })

  paymentBtnCard?.addEventListener("click", function () {
    terminalPaymentLoad()
    setTimeout(showPaymentSuccess, 3000)
    setTimeout(showDoneMessage, 6000)
    paymentPopUpCard.style.display = "block";
    checkoutPopup.style.display = "none";

    closeButtonCard.addEventListener("click", function () {
      paymentPopUpCard.style.display = "none";
    });
  })

  paymentBtnCash?.addEventListener("click", function () {

    paymentPopUpCash.style.display = "block";
    checkoutPopup.style.display = "none";

    closeButtonCash.addEventListener("click", function () {
      paymentPopUpCash.style.display = "none";
    });
  })

  applyCouponButton.addEventListener("click", function () {
    applyDiscount()
  })

  getCategoriesAndProducts().then((result) => {
    const { categoryList, productList } = result

    renderCategories(categoryList, productList)
  })
  function updateDateTime() {
    const dateTimeElement = document.getElementById("current-date-time");
    const currentDate = new Date();

    const formattedDateTime = currentDate.toLocaleString();

    dateTimeElement.textContent = formattedDateTime;
  }

  // Update date and time
  updateDateTime();
  setInterval(updateDateTime, 1000);
</script>